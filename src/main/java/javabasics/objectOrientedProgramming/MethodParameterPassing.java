package javabasics.objectOrientedProgramming;

/**
 * 方法的参数传递
 * 方法，必须有其所在的类或对象调用才有意义。若方法含有参数：
 *      形参：方法声明时的参数
 *      实参：方法调用时实际传给形参的参数值
 * Java的实参值如何传入方法呢？
 *      Java里方法的参数传递方式只有一种：值传递。即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。
 *
 *
 * 总结：方法的参数传递
 * 1、如果方法的形参是基本数据类型，那么实参（实际的数据）向形参传递数据时，就是直接传递值，把实参的值复制给形参
 * 2、方法的形参是对象，那么实参（实际的对象），向形参传递参数的时候，也是把值给形参，这个值是实参在栈内存中的值，也就是引用对象在堆内存中的地址
 *
 * 基本数据类型，值是保存在栈中；引用对象在栈内存中保存的是引用对象的地址，那么方法的参数传递是传递值（是变量在栈内存当中的值）
 */
public class MethodParameterPassing {
    public static void swap(int i) {
        i = 6;
        System.out.println("swap方法里面，i的值是" + i);
    }
    //总之，基本数据类型在参数的传递过程中，就是把实参的值复制到形参上
    public static void main(String[] args) {
        int a = 0;//先执行的int a = 0，在栈中开辟李一块内存，地址假设是AD8500,存的值是0
        swap(a);//调用swap方法，执行int i部分，就会在栈中开辟一块内存，地址假设是AD8600，值就是从a那里复制过来的值，就是0，
                // 执行swap的方法体里面的代码，i = 6，把i在栈中的值再改成6，最终i在栈中的值就是6
        System.out.println("main方法里，变量a的值是" + a);
    }
}
